module Nova.Compiler.Parser where

import Prelude
import Data.Array (Array)
import Data.Either (Either)
import Nova.Compiler.Tokenizer (Token)
import Nova.Compiler.Ast as Ast

import Partial.Unsafe (unsafeCrashWith)

notImplementedYet :: String -> String
notImplementedYet = unsafeCrashWith "Not implemented yet"

type Parser a = Array Token -> Either String ( Tuple a (Array Token) )

type Tokens = Array Token

type ParseError = String

-------------------------------------------------------------------------------
-- Newline‑handling helpers
-------------------------------------------------------------------------------
skipNewlines        :: Tokens -> Tokens
dropNewlines        :: Tokens -> Tokens
stripNewlines       :: Tokens -> Tokens
ensureConsumed      :: Tokens -> Either ParseError Unit

-------------------------------------------------------------------------------
-- Top‑level declaration batch
-------------------------------------------------------------------------------
parseDeclarations   :: Tokens -> Either ParseError { declarations :: Array Ast.Declaration , rest :: Tokens }
parseDeclaration    :: Parser Ast.Declaration

-------------------------------------------------------------------------------
-- Module & import declarations
-------------------------------------------------------------------------------
parseModule                 :: Parser Ast.Module
parseImport                 :: Parser Ast.ImportDeclaration
parseImportAlias            :: Tokens -> Either ParseError ( Tuple (Maybe String) Tokens )
parseImportSelectors        :: Tokens -> Either ParseError ( Tuple (Array Ast.ImportItem) Boolean Tokens )
parseParenImportList        :: Tokens -> Either ParseError ( Tuple (Array Ast.ImportItem) Tokens )
parseImportItem             :: Parser Ast.ImportItem
parseConstructors           :: Tokens -> Either ParseError ( Tuple Ast.ImportItem Tokens )

-------------------------------------------------------------------------------
-- Foreign imports
-------------------------------------------------------------------------------
parseForeignImportSimple    :: Parser Ast.ForeignImport
parseForeignImport          :: Parser Ast.ForeignImport

-------------------------------------------------------------------------------
-- Record patterns & fields
-------------------------------------------------------------------------------
parseRecordPattern          :: Parser Ast.RecordPattern
parseRecordFieldPattern     :: Parser (Tuple String Ast.Pattern)

-------------------------------------------------------------------------------
-- Data/type declarations
-------------------------------------------------------------------------------
parseDataDeclaration        :: Parser Ast.DataType
parseDataConstructors       :: Parser (Array Ast.DataConstructor)
parseDataConstructor        :: Parser Ast.DataConstructor

-------------------------------------------------------------------------------
-- Type classes & instances
-------------------------------------------------------------------------------
parseTypeClass              :: Parser Ast.TypeClass
parseTypeClassInstance      :: Parser Ast.TypeClassInstance
skipSuperclassConstraints   :: Tokens -> Either ParseError ( Tuple Tokens Tokens )
dropInstanceConstraints     :: Tokens -> Tokens

-------------------------------------------------------------------------------
-- Functions with optional type signatures
-------------------------------------------------------------------------------
splitTypeAndRest            :: Tokens -> String -> (Tuple Tokens Tokens)
parseFunctionWithTypeSignature :: Parser Ast.FunctionDeclaration

-------------------------------------------------------------------------------
-- Types & type signatures
-------------------------------------------------------------------------------
parseTypeSignature          :: Parser Ast.TypeSignature
parseType                   :: Parser Ast.TypeExpr
parseForAllType             :: Parser Ast.ForAllType
parseTypeAlias              :: Parser Ast.TypeAlias
parseFunctionType           :: Parser Ast.TypeExpr
parseRecordType             :: Parser Ast.RecordType
parseRecordField            :: Parser (Tuple String Ast.TypeExpr)
parseTypeTerm               :: Parser Ast.TypeExpr
parseListType               :: Parser Ast.TypeExpr
parseTupleType              :: Parser Ast.TypeExpr
parseBasicType              :: Parser Ast.TypeExpr
parseBasicTypeFallback      :: Parser Ast.TypeExpr
parseTypeAtom               :: Parser Ast.TypeExpr

-------------------------------------------------------------------------------
-- Function declarations (no signature)
-------------------------------------------------------------------------------
parseFunctionDeclaration    :: Parser Ast.FunctionDeclaration
parseFunctionParameters     :: Parser (Array Ast.Pattern)

-------------------------------------------------------------------------------
-- Patterns (simple & general)
-------------------------------------------------------------------------------
parseSimplePattern          :: Parser Ast.Pattern
parsePattern                :: Parser Ast.Pattern
parseConstructorPattern     :: Parser Ast.Pattern
parseTuplePattern           :: Parser Ast.Pattern
parseListPattern            :: Parser Ast.Pattern

-------------------------------------------------------------------------------
-- Lambda & expression entry point
-------------------------------------------------------------------------------
parseLambda                 :: Parser Ast.Expression
parseExpression             :: Parser Ast.Expression

-------------------------------------------------------------------------------
-- Let‑bindings, if/else, case, do
-------------------------------------------------------------------------------
parseLetExpression          :: Parser Ast.Expression
parseBinding                :: Parser (Tuple Ast.Pattern Ast.Expression)
parseIfExpression           :: Parser Ast.Expression
parseCaseExpression         :: Parser Ast.Expression
parseCaseClauses            :: Tokens -> Ast.Expression -> Array Ast.CaseClause -> Either ParseError ( Tuple Ast.Expression Tokens )
parseCaseClause             :: Parser Ast.CaseClause
parseDoBlock                :: Parser Ast.DoBlock
parseDoExpression           :: Parser Ast.Expression

-------------------------------------------------------------------------------
-- Binary‑expression precedence ladder
-------------------------------------------------------------------------------
parseBinaryExpression       :: Parser Ast.Expression
parseDollarExpression       :: Parser Ast.Expression
parseLogicalExpression      :: Parser Ast.Expression
parseComparisonExpression   :: Parser Ast.Expression
parseAdditiveExpression     :: Parser Ast.Expression
parseMultiplicativeExpression :: Parser Ast.Expression

-------------------------------------------------------------------------------
-- Function application helpers
-------------------------------------------------------------------------------
parseApplication            :: Parser Ast.Expression
collectApplicationArgs      :: Tokens -> Array Ast.Expression -> Int -> ( Tuple (Array Ast.Expression) Tokens )
parseTerm                   :: Parser Ast.Expression

-------------------------------------------------------------------------------
-- Literals & compound terms
-------------------------------------------------------------------------------
parseListLiteral            :: Parser Ast.List
parseListComprehension      :: Parser Ast.ListComprehension
parseGenerator              :: Parser Ast.Generator
parseTupleLiteral           :: Parser Ast.Tuple
parseLiteral                :: Parser Ast.Literal
parseStringLiteral          :: Tokens -> Either ParseError ( Tuple String Tokens )

-------------------------------------------------------------------------------
-- Low‑level token helpers
-------------------------------------------------------------------------------
parseLabel                  :: Parser Ast.Identifier
parseIdentifier             :: Parser Ast.Identifier
parseQualifiedIdentifier    :: Parser Ast.Identifier
parseAny                    :: Array (Parser a) -> Parser a
parseMany                   :: Parser a -> Tokens -> Either ParseError ( Tuple (Array a) Tokens )
parseSeparated              :: Parser a -> (Tokens -> Either ParseError ( Tuple b Tokens )) -> Tokens -> Either ParseError ( Tuple (Array a) Tokens )
expectKeyword               :: Tokens -> String -> Either ParseError ( Tuple String Tokens )
expectOperator              :: Tokens -> String -> Either ParseError ( Tuple String Tokens )
expectDelimiter             :: Tokens -> String -> Either ParseError ( Tuple String Tokens )
skipUntilEnd                :: Tokens -> Tokens


