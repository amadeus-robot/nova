module Nova.Compiler.Ast where

data Tuple a b = Tuple a b
data Maybe a = Just a | Nothing
data QualifiedIdentifier = String
data Array a = Array a

type Position =
  { line :: Int
  , column :: Int
  , pos :: Int
  }

data TokenType = TTKeyword
  | TTIdentifier
  | TTOperator
  | TTNumber
  | TTString
  | TTChar
  | TTDelimiter
  | TTUnrecognized
  | TTNewline

type Token =
  { ttype :: TokenType
  , value :: String
  , line :: Int
  , column :: Int
  , pos :: Int
  }

-- Result type for parser functions
data ParseOutput a = Ok a (Array Token) | Error String

-- AST Node Types (defined as they are needed)

data Expression
  = ELambda { parameters :: Array Pattern, body :: Expression }
  | ELetBinding { bindings :: Array (Tuple Pattern Expression), body :: Expression }
  | EIfExpression { condition :: Expression, thenBranch :: Expression, elseBranch :: Expression }
  | ECaseExpression { expression :: Expression, cases :: Array CaseClause }
  | EDoBlock { expressions :: Array DoStatement }
  | EBinaryOp { op :: String, left :: Expression, right :: Expression }
  | EApplication { func :: Expression, arguments :: Array Expression } -- Replaces generic FunctionCall for expressions
  | ERecordLiteral { fields :: Array (Tuple String Expression) }
  | ELiteral LiteralValue
  | EList { elements :: Array Expression }
  | EListComprehension { expression :: Expression, generators :: Array Generator, guards :: Array Expression } -- guards added
  | ETuple { elements :: Array Expression }
  | EIdentifier String -- Simple identifier
  | EQualifiedIdentifier (Array String) -- Path like Mod.Sub.name
  | EParenthesized Expression -- For ((expr))

data LiteralValue
  = LNumber String
  | LString String
  | LChar String

data Pattern
  = PRecordPattern { fields :: Array (Tuple String Pattern) }
  | PWildcard
  | PConstructor { constructor :: QualifiedIdentifier, arguments :: Array Pattern } -- Replaces FunctionCall for patterns
  | PTuplePattern { elements :: Array Pattern }
  | PListPattern { elements :: Array Pattern }
  | PLiteral LiteralValue
  | PIdentifier String -- Simple identifier pattern
  | PParenthesized Pattern -- For ((pattern))

data Type
  = TForAll { vars :: Array String, ttype :: Type }
  | TFunctionType { left :: Type, right :: Type } -- BinaryOp "->" becomes this
  | TRecordType { fields :: Array (Tuple String Type) }
  | TTypeApplication { constructor :: Type, arguments :: Array Type } -- Replaces FunctionCall for types
  | TTupleType { elements :: Array Type }
  | TListType Type -- For `[Int]` becomes TListType (TIdentifier "Int")
  | TIdentifier String -- For type names like "Int", "String" or type variables "a"
  | TQualifiedIdentifier (Array String) -- For type names like "Maybe.Maybe"
  | TParenthesized Type -- For ((Type))


type AstIdentifier = String -- For now, qualified names are dot-separated strings

data Module = Module
  { name :: AstIdentifier -- This would be a qualified name as a string
  }

data ImportItem
  = ImportValue AstIdentifier
  | ImportType AstIdentifier (Maybe ImportSpecification)

data ImportSpecification
  = ImportAllConstructors
  | ImportSpecificConstructors (Array AstIdentifier)

data ImportDeclaration = ImportDeclaration
  { imodule :: AstIdentifier
  , alias :: Maybe AstIdentifier
  , items :: Maybe (Array ImportItem) -- Nothing means import all, Just [] means import ()
  , hiding :: Boolean
  }

data TypeSignature = TypeSignature
  { name :: AstIdentifier
  , typeVars :: Array AstIdentifier -- Implicitly quantified
  , constraints :: Array Type -- Context
  , stype :: Type
  }

data ForeignImport = ForeignImport
  { foreignModule :: Maybe String -- String literal for foreign module name
  , foreignFunction :: Maybe String -- String literal for foreign function name
  , alias :: AstIdentifier
  , typeSignature :: TypeSignature
  }

data DataConstructor = DataConstructor
  { name :: AstIdentifier
  , fields :: Array Type
  }

data DataType = DataType
  { name :: AstIdentifier
  , typeVars :: Array AstIdentifier
  , constructors :: Array DataConstructor
  }

data TypeClass = TypeClass
  { name :: AstIdentifier
  , typeVars :: Array AstIdentifier
  , superclasses :: Array Type -- Placeholder for parsed superclass constraints
  , methods :: Array TypeSignature
  }

data TypeClassInstance = TypeClassInstance
  { instanceName :: Maybe AstIdentifier -- For named instances
  , className :: AstIdentifier
  , ctype :: Type -- The type for which the instance is defined
  , constraints :: Array Type -- Instance context
  , methods :: Array FunctionDeclaration
  }

data TypeAlias = TypeAlias
  { name :: AstIdentifier
  , typeVars :: Array AstIdentifier
  , aliasedType :: Type
  }

data FunctionDeclaration = FunctionDeclaration
  { name :: AstIdentifier
  , parameters :: Array Pattern
  , body :: Expression
  , typeSignature :: Maybe TypeSignature
  }

data CaseClause = CaseClause
  { pattern :: Pattern
  , guard :: Maybe Expression
  , body :: Expression
  }

data Generator = Generator
  { pattern :: Pattern
  , expression :: Expression
  }

data DoStatement
  = DoLet AstIdentifier Expression
  | DoBind Pattern Expression -- Pattern, not just identifier
  | DoExpr Expression


data Decl
  = DModule Module
  | DImport ImportDeclaration
  | DForeignImport ForeignImport
  | DDataType DataType
  | DTypeAlias TypeAlias
  | DTypeClass TypeClass
  | DTypeClassInstance TypeClassInstance
  | DFunction FunctionDeclaration
  | DTypeSignature TypeSignature



