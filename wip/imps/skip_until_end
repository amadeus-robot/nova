<implementation>
 <name>skip_until_end</name>
 <code>
skip_until_end :: Array Token -> Array Token
skip_until_end tokens =
  let
    isEndKeyword token =
      case token.ttype of
        TTKeyword -> token.value == "end"
        _ -> false

    maybeIndex = elixirEnumFindIndex isEndKeyword tokens
  in
    case maybeIndex of
      Just idx -> elixirEnumDrop (idx + 1) tokens
      Nothing -> tokens
 </code>
 <tests>
  <test>
   let
    t1 = { ttype = TTIdentifier, value = "a", line = 1, column = 1, pos = 0 }
    t2 = { ttype = TTKeyword, value = "do", line = 1, column = 3, pos = 2 }
    t3 = { ttype = TTIdentifier, value = "b", line = 1, column = 6, pos = 5 }
    t4 = { ttype = TTKeyword, value = "end", line = 1, column = 8, pos = 7 }
    t5 = { ttype = TTIdentifier, value = "c", line = 1, column = 12, pos = 11 }
    tokens = Array [t1, t2, t3, t4, t5]
    expected = Array [t5]
   in
    skip_until_end tokens == expected
  </test>
  <test>
   let
    t1 = { ttype = TTIdentifier, value = "a", line = 1, column = 1, pos = 0 }
    t2 = { ttype = TTKeyword, value = "do", line = 1, column = 3, pos = 2 }
    t3 = { ttype = TTIdentifier, value = "b", line = 1, column = 6, pos = 5 }
    tokens = Array [t1, t2, t3]
    expected = Array [t1, t2, t3]
   in
    skip_until_end tokens == expected
  </test>
  <test>
   let
    tokens = Array []
    expected = Array []
   in
    skip_until_end tokens == expected
  </test>
  <test>
   let
    t1 = { ttype = TTKeyword, value = "end", line = 1, column = 1, pos = 0 }
    t2 = { ttype = TTIdentifier, value = "a", line = 1, column = 5, pos = 4 }
    tokens = Array [t1, t2]
    expected = Array [t2]
   in
    skip_until_end tokens == expected
  </test>
 </tests>
</implementation>