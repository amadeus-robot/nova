<implementation>
 <name>is_pattern_start</name>
 <code>
is_pattern_start :: Array Token -> Boolean
is_pattern_start tokens =
  case elixirListFirst tokens of
    Nothing -> false
    Just token ->
      case token.ttype of
        TTNumber -> true
        TTIdentifier -> true
        TTDelimiter ->
          case token.value of
            "(" -> true
            "[" -> true
            "{" -> true
            _ -> false
        TTString -> true
        TTChar -> true
        TTKeyword ->
          case token.value of
            "end" -> true
            "in" -> true
            "else" -> true
            "then" -> true
            _ -> false
        _ -> false
 </code>
 <tests>
  <test>
   is_pattern_start [] == false
  </test>
  <test>
   is_pattern_start? [{ ttype: TTNumber, value: "1", line: 1, column: 1, pos: 1 }] == true
  </test>
  <test>
   is_pattern_start? [{ ttype: TTIdentifier, value: "x", line: 1, column: 1, pos: 1 }] == true
  </test>
  <test>
   is_pattern_start? [{ ttype: TTDelimiter, value: "(", line: 1, column: 1, pos: 1 }] == true
  </test>
  <test>
   is_pattern_start? [{ ttype: TTDelimiter, value: ")", line: 1, column: 1, pos: 1 }] == false
  </test>
  <test>
   is_pattern_start? [{ ttype: TTString, value: "\"abc\"", line: 1, column: 1, pos: 1 }] == true
  </test>
  <test>
   is_pattern_start? [{ ttype: TTChar, value: "'a'", line: 1, column: 1, pos: 1 }] == true
  </test>
  <test>
   is_pattern_start? [{ ttype: TTKeyword, value: "case", line: 1, column: 1, pos: 1 }] == false
  </test>
  <test>
   is_pattern_start? [{ ttype: TTKeyword, value: "end", line: 1, column: 1, pos: 1 }] == true
  </test>
  <test>
   is_pattern_start? [{ ttype: TTUnrecognized, value: "$", line: 1, column: 1, pos: 1 }] == false
  </test>
 </tests>
</implementation>
</function>
