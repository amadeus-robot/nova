```
<implementation>
 <name>drop_instance_constraints</name>
 <code>
drop_instance_constraints :: Array Token -> Array Token
drop_instance_constraints tokens =
  let
    is_not_constraint_delimiter token =
      case token.ttype of
        TTOperator -> token.value /= "<="
        _ -> true

    splitResult = elixirEnumSplitWhile is_not_constraint_delimiter tokens
  in
    case splitResult of
      Tuple _ after ->
        case after of
          h : t ->
            case h.ttype of
              TTOperator ->
                if h.value == "<=" then
                  t
                else
                  tokens
              _ -> tokens
          [] -> tokens
 </code>
 <tests>
  <test>drop_instance_constraints (Array.fromFoldable [{ ttype: TTIdentifier, value: "C1", line: 1, column: 1, pos: 0 }, { ttype: TTDelimiter, value: ",", line: 1, column: 3, pos: 2 }, { ttype: TTIdentifier, value: "C2", line: 1, column: 5, pos: 4 }, { ttype: TTOperator, value: "<=", line: 1, column: 8, pos: 7 }, { ttype: TTIdentifier, value: "MyClass", line: 1, column: 11, pos: 10 }]) == Array.fromFoldable [{ ttype: TTIdentifier, value: "MyClass", line: 1, column: 11, pos: 10 }]</test>
  <test>drop_instance_constraints (Array.fromFoldable [{ ttype: TTIdentifier, value: "MyClass", line: 1, column: 1, pos: 0 }, { ttype: TTIdentifier, value: "Int", line: 1, column: 9, pos: 8 }]) == Array.fromFoldable [{ ttype: TTIdentifier, value: "MyClass", line: 1, column: 1, pos: 0 }, { ttype: TTIdentifier, value: "Int", line: 1, column: 9, pos: 8 }]</test>
  <test>drop_instance_constraints (Array.fromFoldable [{ ttype: TTOperator, value: "<=", line: 1, column: 1, pos: 0 }, { ttype: TTIdentifier, value: "MyClass", line: 1, column: 4, pos: 3 }]) == Array.fromFoldable [{ ttype: TTIdentifier, value: "MyClass", line: 1, column: 4, pos: 3 }]</test>
  <test>drop_instance_constraints (Array.fromFoldable []) == Array.fromFoldable []</test>
 </tests>
</implementation>
```