<implementation>
 <name>skip_superclass_constraints</name>
 <code>
skip_superclass_constraints :: Array Token -> Tuple (Array Token) (Array Token)
skip_superclass_constraints tokens =
  let
    tokens' = skip_newlines tokens

    is_not_le token =
      case token.ttype of
        TTOperator -> token.value /= "<="
        _ -> true

    Tuple before after = elixirEnumSplitWhile is_not_le tokens'

    handle_after after' =
      case after' of
        [] -> Tuple tokens []
        h : rest ->
          case h.ttype of
            TTOperator ->
              if h.value == "<="
                then Tuple rest before
                else Tuple tokens []
            _ -> Tuple tokens []
  in
    handle_after after
 </code>
 <tests>
  <test>let t1 = { ttype: TTIdentifier, value: "C1", line: 1, column: 1, pos: 0 }; let t2 = { ttype: TTDelimiter, value: ",", line: 1, column: 3, pos: 2 }; let t3 = { ttype: TTIdentifier, value: "C2", line: 1, column: 5, pos: 4 }; let t4 = { ttype: TTOperator, value: "<=", line: 1, column: 8, pos: 7 }; let t5 = { ttype: TTIdentifier, value: "MyClass", line: 1, column: 11, pos: 10 }; let tokens = [t1, t2, t3, t4, t5]; let Tuple rest constraints = skip_superclass_constraints tokens; rest == [t5] && constraints == [t1, t2, t3]</test>
  <test>let t1 = { ttype: TTIdentifier, value: "MyClass", line: 1, column: 1, pos: 0 }; let t2 = { ttype: TTIdentifier, value: "a", line: 1, column: 9, pos: 8 }; let tokens = [t1, t2]; let Tuple rest constraints = skip_superclass_constraints tokens; rest == tokens && constraints == []</test>
  <test>let t1 = { ttype: TTIdentifier, value: "C1", line: 1, column: 1, pos: 0 }; let t2 = { ttype: TTNewline, value: "\n", line: 1, column: 3, pos: 2 }; let t3 = { ttype: TTOperator, value: "<=", line: 2, column: 1, pos: 4 }; let t4 = { ttype: TTIdentifier, value: "MyClass", line: 2, column: 4, pos: 7 }; let tokens = [t1, t2, t3, t4]; let Tuple rest constraints = skip_superclass_constraints tokens; rest == [t4] && constraints == [t1]</test>
 </tests>
</implementation>